-- Revert pgosm-flex-faker:002 from pg

BEGIN;


CREATE PROCEDURE geofaker.points_around_point()
	LANGUAGE plpgsql
AS $$
DECLARE
	stores_to_process BIGINT;
	t_row faker_store_location%rowtype;
BEGIN

	SELECT  COUNT(*) INTO stores_to_process
		FROM faker_store_location
	;
	RAISE NOTICE 'Generating customers for % stores...', stores_to_process;

	DROP TABLE IF EXISTS faker_customer_location;
	CREATE TEMP TABLE faker_customer_location
	(
		id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
		store_id BIGINT NOT NULL,
		customer_id BIGINT NOT NULL,
		geom GEOMETRY(POINT, 3857) NOT NULL
	);


	FOR t_row IN SELECT * FROM faker_store_location LOOP
		IF t_row.store_id % 10 = 0 THEN
			RAISE NOTICE 'Store ID: %', t_row.store_id;
		END IF;

		DROP TABLE IF EXISTS place_buffer;
		CREATE TEMP TABLE place_buffer AS
		SELECT store_id, geom, ST_Buffer(geom, 5000) AS geom_buffer
			FROM faker_store_location
			WHERE store_id = t_row.store_id
		;

		DROP TABLE IF EXISTS store_potential_customers;
		CREATE TEMP TABLE store_potential_customers AS
		SELECT store_id,
				geofaker.n_points_in_polygon(geom_buffer, 1000)
					AS geom
			FROM place_buffer
		;
		ALTER TABLE store_potential_customers
			ADD customer_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY;

		--SELECT * FROM store_potential_customers;
		/*
		* Using a CTE here with ST_Envelope to bbox join roads.
		* A simple join (which looks innocent) took 45+ seconds to return 141 rows
		* while the CTE version takes < 60 ms.
		*/
		--EXPLAIN (ANALYZE, BUFFERS, VERBOSE, SETTINGS)
		WITH possible_roads AS (
		SELECT p.store_id, p.customer_id, p.geom AS geom_customer,
				r.geom AS geom_road,
				ST_Distance(p.geom, r.geom) AS distance
			FROM osm.road_line r
			INNER JOIN store_potential_customers p
				ON ST_DWithin(r.geom, p.geom, 300)
			WHERE r.route_motor
		), ranked AS (
		SELECT *, ROW_NUMBER() OVER (
					PARTITION BY store_id, customer_id ORDER BY distance
					) AS rnk
			FROM possible_roads
		)
		INSERT INTO faker_customer_location (store_id, customer_id, geom)
		SELECT store_id, customer_id,
				ST_Snap(geom_customer, geom_road, 300) AS geom_snapped
			FROM ranked
			WHERE rnk = 1
		;
		COMMIT;

	END LOOP;

END;
$$;


COMMIT;
