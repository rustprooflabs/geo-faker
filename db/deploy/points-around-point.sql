-- Deploy pgosm-flex-faker:points-around-point to pg
-- requires: n-points-in-polygon

BEGIN;


-- Ensure the required temp table exists, avoids deploy failure creating next sproc
CREATE TEMP TABLE IF NOT EXISTS faker_store_location
(
	store_id BIGINT, place_osm_id BIGINT, place_osm_type TEXT, place_name TEXT,
	road_osm_id BIGINT, geom GEOMETRY
);


CREATE PROCEDURE geofaker.points_around_point(
        _distance_scale NUMERIC = 1.0,
        _density_scale NUMERIC = 1.0
)
	LANGUAGE plpgsql
AS $$
DECLARE
	stores_to_process BIGINT;
	t_row faker_store_location%rowtype;
BEGIN

	SELECT  COUNT(*) INTO stores_to_process
		FROM faker_store_location
	;
	RAISE NOTICE 'Generating customers for % stores...', stores_to_process;

	DROP TABLE IF EXISTS faker_customer_location;
	CREATE TEMP TABLE faker_customer_location
	(
		id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
		store_id BIGINT NOT NULL,
		customer_id BIGINT NOT NULL,
		geom GEOMETRY(POINT, 3857) NOT NULL
	);


	FOR t_row IN SELECT * FROM faker_store_location LOOP
		IF t_row.store_id % 10 = 0 THEN
			RAISE NOTICE 'Store ID: %', t_row.store_id;
		END IF;

		DROP TABLE IF EXISTS place_buffer;
		CREATE TEMP TABLE place_buffer AS
		WITH buffers AS (
		SELECT store_id, geom,
                ST_Buffer(geom, 5000 * _distance_scale) AS geom_buffer_inner,
                ST_Buffer(geom, 15000 * _distance_scale) AS geom_buffer_middle_tmp,
                ST_Buffer(geom, 30000 * _distance_scale) AS geom_buffer_outer_tmp
			FROM faker_store_location
			WHERE store_id = t_row.store_id
		)
		SELECT store_id, geom, geom_buffer_inner,
		      ST_Difference(geom_buffer_middle_tmp, geom_buffer_inner)
		          AS geom_buffer_middle,
		      ST_Difference(geom_buffer_outer_tmp, geom_buffer_middle_tmp)
                  AS geom_buffer_outer
		  FROM buffers
		;

		DROP TABLE IF EXISTS store_potential_customers;
		CREATE TEMP TABLE store_potential_customers AS
		SELECT store_id,
				geofaker.n_points_in_polygon(geom_buffer_inner, (1000 * _density_scale)::INT )
					AS geom
			FROM place_buffer
		UNION
		SELECT store_id,
				geofaker.n_points_in_polygon(geom_buffer_middle, (300 * _density_scale)::INT )
                    AS geom
            FROM place_buffer
        UNION
        SELECT store_id,
                geofaker.n_points_in_polygon(geom_buffer_outer, (75 * _density_scale)::INT )
                    AS geom
			FROM place_buffer
		;
		ALTER TABLE store_potential_customers
			ADD customer_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY;


		--EXPLAIN (ANALYZE, BUFFERS, VERBOSE, SETTINGS)
		WITH possible_roads AS (
		SELECT p.store_id, p.customer_id, p.geom AS geom_customer,
				r.geom AS geom_road,
				ST_Distance(p.geom, r.geom) AS distance
			FROM osm.road_line r
			INNER JOIN store_potential_customers p
				ON ST_DWithin(r.geom, p.geom, 300)
			WHERE r.route_motor
		), ranked AS (
		SELECT *, ROW_NUMBER() OVER (
					PARTITION BY store_id, customer_id ORDER BY distance
					) AS rnk
			FROM possible_roads
		)
		INSERT INTO faker_customer_location (store_id, customer_id, geom)
		SELECT store_id, customer_id,
				ST_Snap(geom_customer, geom_road, 300) AS geom_snapped
			FROM ranked
			WHERE rnk = 1
		;
		COMMIT;

	END LOOP;

    RAISE NOTICE 'Completed';

END;
$$;


COMMIT;
